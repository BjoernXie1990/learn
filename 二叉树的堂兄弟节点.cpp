在二叉树中，根节点位于深度 0 处，每个深度为 k 的节点的子节点位于深度 k+1 处。

如果二叉树的两个节点深度相同，但父节点不同，则它们是一对堂兄弟节点。

我们给出了具有唯一值的二叉树的根节点 root，以及树中两个不同节点的值 x 和 y。

只有与值 x 和 y 对应的节点是堂兄弟节点时，才返回 true。否则，返回 false。

?

示例 1：


输入：root = [1,2,3,4], x = 4, y = 3
输出：false
示例 2：


输入：root = [1,2,3,null,4,null,5], x = 5, y = 4
输出：true
示例 3：



输入：root = [1,2,3,null,4], x = 2, y = 3
输出：false
?

提示：

二叉树的节点数介于?2 到?100?之间。
每个节点的值都是唯一的、范围为?1 到?100?的整数。


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isCousins(TreeNode* root, int x, int y) {
        queue<TreeNode*> que;
        que.push(root);

        while(!que.empty())
        {
            int size = que.size();
            int sum = 0;
            while(size--)
            {
                auto f = que.front();
                que.pop();
                
                int tmp = 0;
                if(f->left)
                {
                    if(f->left->val == x || f->left->val == y)
                    {
                        sum++;
                        tmp++;
                    }
                        
                    que.push(f->left);
                }
                if(f->right)
                {
                    if(f->right->val == x || f->right->val == y)
                    {
                        sum++;
                        tmp++;
                    }
                    que.push(f->right);
                }

                if(tmp == 2) return false;//同一个父亲节点
            }

            if(sum == 2)    return true;//堂兄弟节点
            if(sum != 0)    return false;//只找到一个节点
        }
        return false;
    }
};
