给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。

如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。

您可以假设除了数字 0 之外，这两个数都不会以 0 开头。

输入：(2 -> 4 -> 3) + (5 -> 6 -> 4)
输出：7 -> 0 -> 8
原因：342 + 465 = 807



/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */

typedef struct ListNode list;

//递推
list* Index(list* tar,list* node,int* num)
{
    //为当前节点赋值
    node->val = *num % 10;
    *num /= 10;

    //尾插
    tar->next = node;
    node->next = NULL;

    return node;
}

struct ListNode* addTwoNumbers1(struct ListNode* l1, struct ListNode* l2){
    list* head = (list*)malloc(sizeof(list));
    head->next = NULL;
    list* tar = head;//定义尾结点
    int num = 0;

    while(l1 || l2)
    {
        if(l1)
        {
            num += l1->val;
            l1 = l1->next;
        }

        if(l2)
        {
            num += l2 ->val;
            l2 = l2 ->next;
        }
        list* node = (list*)malloc(sizeof(list));
        tar = Index(tar,node,&num);
    }

    //如果有进位
    while(num)
    {
        list* node = (list*)malloc(sizeof(list));
        tar = Index(tar,node,&num);
    }
    
    return head->next;
}


//递归
list* fun(list* l1,list* l2,int num)
{
    if(!l1 && !l2 && !num)
        return NULL;
    
    l1 = l1?(num += l1 -> val,l1->next):l1;
    l2 = l2?(num += l2 -> val,l2->next):l2;

    list* node = (list*)malloc(sizeof(list));
    node->val = num % 10;
    num /= 10;

    node->next = fun(l1,l2,num);

    return node;
}

struct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2){
    int num = 0;
    return fun(l1,l2,num);
}