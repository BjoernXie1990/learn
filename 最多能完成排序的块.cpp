//数组arr是[0, 1, ..., arr.length - 1]的一种排列，我们将这个数组分割成几个“块”，
//并将这些块分别进行排序。之后再连接起来，使得连接的结果和按升序排序后的原数组相同。

//我们最多能将数组分成多少块？

//示例 1:

//输入: arr = [4,3,2,1,0]
//输出: 1
//解释:
//将数组分成2块或者更多块，都无法得到所需的结果。
//例如，分成 [4, 3], [2, 1, 0] 的结果是 [3, 4, 0, 1, 2]，这不是有序的数组。
//示例 2:

//输入: arr = [1,0,2,3,4]
//输出: 4
//解释:
//我们可以把它分成两块，例如 [1, 0], [2, 3, 4]。
//然而，分成 [1, 0], [2], [3], [4] 可以得到最多的块数。


class Solution {
public:
    int maxChunksToSorted(vector<int>& arr) {
        int len = 0;
        int maxNum = 0;
        for(int i = 0; i < arr.size(); i++)
        {
            maxNum = max(arr[i],maxNum);
            if(maxNum <= i)
                len++;
        }
        return len;
    }
};

//这个问题和“最多能完成排序的块”相似，但给定数组中的元素可以重复，输入数组最大长度为2000，其中的元素最大为10**8。

//arr是一个可能包含重复元素的整数数组，我们将这个数组分割成几个“块”，并将这些块分别进行排序。
//之后再连接起来，使得连接的结果和按升序排序后的原数组相同。

//我们最多能将数组分成多少块？

//示例?1:

//输入: arr = [5,4,3,2,1]
//输出: 1
//解释:
//将数组分成2块或者更多块，都无法得到所需的结果。
//例如，分成 [5, 4], [3, 2, 1] 的结果是 [4, 5, 1, 2, 3]，这不是有序的数组。 
//示例 2:

//输入: arr = [2,1,3,4,4]
//输出: 4
//解释:
//我们可以把它分成两块，例如 [2, 1], [3, 4, 4]。
//然而，分成 [2, 1], [3], [4], [4] 可以得到最多的块数。 



class Solution {
public:
    int maxChunksToSorted(vector<int>& arr) {
        int ans = 1;
        int len = arr.size();
        vector<vector<int> > dp(len,vector<int>(2,0));
        dp[0][0] = arr[0];
        dp[len-1][1] = arr[len-1];

        //从左到右找i位置左边的最大值
        for(int i = 1; i < len; i++)
            dp[i][0] = max(arr[i],dp[i-1][0]);
        
        //从右向左找i位置右边的最小值
        for(int i = len - 2; i >= 0; i--)
        {
            dp[i][1] = min(arr[i],dp[i + 1][1]);  
            //找结果
            if(dp[i][0] <= dp[i + 1][1])
                ans++;
        }

        return ans;
    }
};
