//一条包含字母?A-Z 的消息通过以下的方式进行了编码：

//'A' -> 1
//'B' -> 2
//...
//'Z' -> 26
//除了上述的条件以外，现在加密字符串可以包含字符 '*'了，字符'*'可以被当做1到9当中的任意一个数字。

//给定一条包含数字和字符'*'的加密信息，请确定解码方法的总数。

//同时，由于结果值可能会相当的大，所以你应当对109?+ 7取模。（翻译者标注：此处取模主要是为了防止溢出）

//示例 1 :

//输入: "*"
//输出: 9
//解释: 加密的信息可以被解密为: "A", "B", "C", "D", "E", "F", "G", "H", "I".
//示例 2 :

//输入: "1*"
//输出: 9 + 9 = 18（翻译者标注：这里1*可以分解为1,* 或者当做1*来处理，所以结果是9+9=18）
//说明 :

//输入的字符串长度范围是 [1, 105]。
//输入的字符串只会包含字符 '*' 和 数字'0' - '9'。

class Solution {
public:
    const int mod = 1000000007;
    int numDecodings(string s) {
        int len = s.size();
        vector<long long> dp(len,0);
        dp[0] = s[0]=='*'?9:(s[0]=='0'?0:1);
        

        for(int i = 1; i < len; i++)
        {
            //单个字符的情况
            if(s[i]!='0')
                if(s[i]=='*') dp[i] += dp[i-1] * 9;
                else dp[i] += dp[i-1];
            
            //两个字符情况
            if(s[i]=='*')
            {
                if(i >= 2)
                {
                    if(s[i-1]=='1') dp[i]+=9*dp[i-2];
                    else if(s[i-1]=='2') dp[i]+=6*dp[i-2];
                    else if(s[i-1]=='*') dp[i]+=15*dp[i-2];
                }
                else
                {
                    if(s[i-1]=='1') dp[i]+=9;
                    else if(s[i-1]=='2') dp[i]+=6;
                    else if(s[i-1]=='*') dp[i]+=15;
                }
            }
            else if(s[i-1]=='1' || (s[i-1]=='2' && s[i]<='6' && s[i]>='0'))
                if(i >= 2) dp[i] += dp[i-2];
                else dp[i]++;
            else if(s[i-1] == '*' && (s[i]>='0' && s[i]<='6'))
                if(i>=2) dp[i]+=dp[i-2]*2;
                else dp[i]+=2;
            else if(s[i-1] == '*' && (s[i]>='7' && s[i]<='9'))
                if(i>=2) dp[i]+=dp[i-2];
                else dp[i]++;
            dp[i] %= mod;
        }
        return dp[len-1];
    }
};
