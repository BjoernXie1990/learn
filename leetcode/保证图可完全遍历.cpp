class Solution {
public:
    class chSet {
        public:
            chSet(int size) {
                _arr = vector<int> (size,0);
                for(int i = 1; i < size; i++)  _arr[i] = i;
            }
            int find(int p) {
                while(_arr[p] != p) {
                    _arr[p] = _arr[_arr[p]];
                    p = _arr[p];
                }
                return p;
            }
            bool merge(int le,int ri) {
                int l = find(le);
                int r = find(ri);
                if(l == r) return false;

                _arr[l] = r;
                return true;
            }
        private:
            vector<int> _arr;
    };
    int maxNumEdgesToRemove(int n, vector<vector<int>>& edges) {
        chSet Alice(n+1);
        chSet Bob(n+1);
        sort(edges.begin(),edges.end(),[](const auto& a,const auto& b)->bool{
            return a[0] > b[0];
        });

        int common = 0;
        int a_cnt  = 0;
        int b_cnt  = 0;

        for(auto& e : edges) {
            bool ret = false;
            if(e[0] == 3) {
                ret = Alice.merge(e[1],e[2]);
                if(ret == true) {
                    common++;
                    a_cnt++;
                }
                ret = Bob.merge(e[1],e[2]);
                if(ret == true) b_cnt++;
            } else if (e[0] == 2) {
                ret = Bob.merge(e[1],e[2]);
                if(ret == true) b_cnt++;
            } else if (e[0] == 1) {
                ret = Alice.merge(e[1],e[2]);
                if(ret == true) a_cnt++;
            }
        }

        if(a_cnt != n-1 || b_cnt != n-1) return -1;
        int sum = edges.size();
        return sum - (n-1) * 2 + common;
    }
};


Alice 和 Bob 共有一个无向图，其中包含 n 个节点和 3? 种类型的边：

类型 1：只能由 Alice 遍历。
类型 2：只能由 Bob 遍历。
类型 3：Alice 和 Bob 都可以遍历。
给你一个数组 edges ，其中 edges[i] = [typei, ui, vi]?表示节点 ui 和 vi 之间存在类型为 typei 的双向边。请你在保证图仍能够被 Alice和 Bob 完全遍历的前提下，找出可以删除的最大边数。如果从任何节点开始，Alice 和 Bob 都可以到达所有其他节点，则认为图是可以完全遍历的。

返回可以删除的最大边数，如果 Alice 和 Bob 无法完全遍历图，则返回 -1 。

?

示例 1：



输入：n = 4, edges = [[3,1,2],[3,2,3],[1,1,3],[1,2,4],[1,1,2],[2,3,4]]
输出：2
解释：如果删除 [1,1,2] 和 [1,1,3] 这两条边，Alice 和 Bob 仍然可以完全遍历这个图。再删除任何其他的边都无法保证图可以完全遍历。所以可以删除的最大边数是 2 。
示例 2：



输入：n = 4, edges = [[3,1,2],[3,2,3],[1,1,4],[2,1,4]]
输出：0
解释：注意，删除任何一条边都会使 Alice 和 Bob 无法完全遍历这个图。
示例 3：



输入：n = 4, edges = [[3,2,3],[1,1,2],[2,3,4]]
输出：-1
解释：在当前图中，Alice 无法从其他节点到达节点 4 。类似地，Bob 也不能达到节点 1 。因此，图无法完全遍历。
?

提示：

1 <= n <= 10^5
1 <= edges.length <= min(10^5, 3 * n * (n-1) / 2)
edges[i].length == 3
1 <= edges[i][0] <= 3
1 <= edges[i][1] < edges[i][2] <= n
所有元组 (typei, ui, vi) 互不相同

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/remove-max-number-of-edges-to-keep-graph-fully-traversable
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
