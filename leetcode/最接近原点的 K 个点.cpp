我们有一个由平面上的点组成的列表 points。需要从中找出 K 个距离原点 (0, 0) 最近的点。

（这里，平面上两点之间的距离是欧几里德距离。）

你可以按任何顺序返回答案。除了点坐标的顺序之外，答案确保是唯一的。

?

示例 1：

输入：points = [[1,3],[-2,2]], K = 1
输出：[[-2,2]]
解释： 
(1, 3) 和原点之间的距离为 sqrt(10)，
(-2, 2) 和原点之间的距离为 sqrt(8)，
由于 sqrt(8) < sqrt(10)，(-2, 2) 离原点更近。
我们只需要距离原点最近的 K = 1 个点，所以答案就是 [[-2,2]]。
示例 2：

输入：points = [[3,3],[5,-1],[-2,4]], K = 2
输出：[[3,3],[-2,4]]
（答案 [[-2,4],[3,3]] 也会被接受。）
?

提示：

1 <= K <= points.length <= 10000
-10000 < points[i][0] < 10000
-10000 < points[i][1] < 10000


class Solution {
public:
    struct comper
    {
        bool operator()(const pair<int,int>& a,const pair<int,int>& b)
        {
            return a.second < b.second;
        }
    };

    vector<vector<int>> kClosest(vector<vector<int>>& points, int k) {
        int n = points.size();  
        using key = pair<int,int>;
        priority_queue<key,vector<key>,comper> s_heap;

        for(int i = 0; i < n; i++)
        {
            int path = points[i][0] * points[i][0] + points[i][1] * points[i][1];
            s_heap.push({i,path});

            if(s_heap.size() > k)   s_heap.pop();
        }

        vector<vector<int> > ans(k,vector<int> (2,0));
        for(int i = 0; i < k; i++)
        {
            auto t = s_heap.top();
            s_heap.pop();
            int p = t.first;

            ans[i][0] = points[p][0];
            ans[i][1] = points[p][1];
        }

        return ans;
    }
};
