#include <iostream>
using namespace std;

typedef long long LL;
const int N = 1e6 + 10;

int n,m;
int r[N];
int d[N],s[N],t[N];
LL f[N];

// 检查第k个订单是否可以完成
bool check(int k) {
    for(int i = 1; i <= n; i++)
        f[i] = r[i] - r[i - 1];
    
    for(int i = 1; i <= k; i++) {
        f[s[i]] -= d[i];
        f[t[i] + 1] += d[i];
    }
    
    LL res = 0;
    for(int i = 1; i <= n; i++) {
        res += f[i];
        if(res < 0) return true;
    }
    return false;
}

int main() {
    cin >> n >> m;
    for(int i = 1; i <= n; i++) cin >> r[i];
    for(int i = 1; i <= m; i++) cin >> d[i] >> s[i] >> t[i];
    
    int le = 1, ri = m;
    while(le < ri) {
        int mid = le + ri >> 1;
        if(check(mid)) ri = mid;
        else le = mid + 1;
    }
    
    if(check(le)) cout << "-1" << endl << le << endl;
    else cout << "0" << endl;
    return 0;
}

在大学期间，经常需要租借教室。

大到院系举办活动，小到学习小组自习讨论，都需要向学校申请借教室。

教室的大小功能不同，借教室人的身份不同，借教室的手续也不一样。?

面对海量租借教室的信息，我们自然希望编程解决这个问题。

我们需要处理接下来n天的借教室信息，其中第i天学校有ri个教室可供租借。

共有m份订单，每份订单用三个正整数描述，分别为dj,sj,tj，表示某租借者需要从第sj天到第tj天租借教室（包括第sj天和第tj天），每天需要租借dj个教室。?

我们假定，租借者对教室的大小、地点没有要求。

即对于每份订单，我们只需要每天提供dj个教室，而它们具体是哪些教室，每天是否是相同的教室则不用考虑。?

借教室的原则是先到先得，也就是说我们要按照订单的先后顺序依次为每份订单分配教室。

如果在分配的过程中遇到一份订单无法完全满足，则需要停止教室的分配，通知当前申请人修改订单。

这里的无法满足指从第sj天到第tj天中有至少一天剩余的教室数量不足dj个。?

现在我们需要知道，是否会有订单无法完全满足。

如果有，需要通知哪一个申请人修改订单。

输入格式
第一行包含两个正整数n,m，表示天数和订单的数量。?

第二行包含n个正整数，其中第i个数为ri，表示第i天可用于租借的教室数量。?

接下来有m行，每行包含三个正整数dj,sj,tj，表示租借的数量，租借开始、结束分别在第几天。?

每行相邻的两个数之间均用一个空格隔开。

天数与订单均用从1开始的整数编号。

输出格式
如果所有订单均可满足，则输出只有一行，包含一个整数0。

否则（订单无法完全满足）输出两行，第一行输出一个负整数-1，第二行输出需要修改订单的申请人编号。

数据范围
1≤n,m≤106,
0≤ri,dj≤109,
1≤sj≤tj≤n
输入样例：
4 3 
2 5 4 3 
2 1 3 
3 2 4 
4 2 4
输出样例：
-1 
2
