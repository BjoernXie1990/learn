#include <iostream>
using namespace std;

const int N = 400, M = 200, S = 40;
int n,m;
int score[N];
int f[S][S][S][S];

int main() {
    cin >> n >> m;
    int cnt[5] = {0};
    for(int i = 0; i < n; i++) cin >> score[i];
    for(int i = 1; i <= m; i++) {
        int t;
        cin >> t;
        cnt[t] ++;
    }
    
    for(int A = 0; A <= cnt[1]; A++)
        for(int B = 0; B <= cnt[2]; B++)
            for(int C = 0; C <= cnt[3]; C++)
                for(int D = 0; D <= cnt[4]; D++) {
                    int s = score[A + B * 2 + C * 3 + D * 4];
                    int& v = f[A][B][C][D];
                    v = s;
                    if(A) v = max(v,f[A - 1][B][C][D] + s);
                    if(B) v = max(v,f[A][B - 1][C][D] + s);
                    if(C) v = max(v,f[A][B][C - 1][D] + s);
                    if(D) v = max(v,f[A][B][C][D - 1] + s);
                }
    cout << f[cnt[1]][cnt[2]][cnt[3]][cnt[4]] << endl;
    return 0;
}

小明过生日的时候，爸爸送给他一副乌龟棋当作礼物。

乌龟棋的棋盘只有一行，该行有 N 个格子，每个格子上一个分数（非负整数）。

棋盘第 1 格是唯一的起点，第 N 格是终点，游戏要求玩家控制一个乌龟棋子从起点出发走到终点。

乌龟棋中共有 M 张爬行卡片，分成 4 种不同的类型（M 张卡片中不一定包含所有 4 种类型的卡片），每种类型的卡片上分别标有1、2、3、4 四个数字之一，表示使用这种卡片后，乌龟棋子将向前爬行相应的格子数。

游戏中，玩家每次需要从所有的爬行卡片中选择一张之前没有使用过的爬行卡片，控制乌龟棋子前进相应的格子数，每张卡片只能使用一次。

游戏中，乌龟棋子自动获得起点格子的分数，并且在后续的爬行中每到达一个格子，就得到该格子相应的分数。

玩家最终游戏得分就是乌龟棋子从起点到终点过程中到过的所有格子的分数总和。

很明显，用不同的爬行卡片使用顺序会使得最终游戏的得分不同，小明想要找到一种卡片使用顺序使得最终游戏得分最多。

现在，告诉你棋盘上每个格子的分数和所有的爬行卡片，你能告诉小明，他最多能得到多少分吗？

输入格式
输入文件的每行中两个数之间用一个空格隔开。

第 1 行 2 个正整数 N 和 M，分别表示棋盘格子数和爬行卡片数。

第 2 行 N 个非负整数，a1,a2,……,aN，其中 ai 表示棋盘第 i 个格子上的分数。

第 3 行 M 个整数，b1,b2,……,bM，表示 M 张爬行卡片上的数字。

输入数据保证到达终点时刚好用光 M 张爬行卡片。

输出格式
输出只有 1 行，包含 1 个整数，表示小明最多能得到的分数。

数据范围
1≤N≤350,
1≤M≤120,
0≤ai≤100,
1≤bi≤4,
每种爬行卡片的张数不会超过40。

输入样例：
9 5
6 10 14 2 8 8 18 5 17
1 3 1 2 1
输出样例：
73
