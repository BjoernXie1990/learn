//给定一个二叉树，判断其是否是一个有效的二叉搜索树。

//假设一个二叉搜索树具有如下特征：

//节点的左子树只包含小于当前节点的数。
//节点的右子树只包含大于当前节点的数。
//所有左子树和右子树自身必须也是二叉搜索树。
//示例?1:

//输入:
//    2
//   / \
//  1   3
//输出: true
//示例?2:

//输入:
//    5
//   / \
//  1   4
//?    / \
//?   3   6
//输出: false
//解释: 输入为: [5,1,4,null,null,3,6]。
//?    根节点的值为 5 ，但是其右子节点值为 4 。


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    long num = LONG_MIN;
    bool isValidBST(TreeNode* root) {
        if(!root)
            return true;
        //如果左子树返回为false  或者当前跟节点的值不比前一个节点大
        if(!isValidBST(root->left) || root->val <= num)
            return false;
        //更新存储数据
        num = root->val;
        //再遍历右子树
        return isValidBST(root->right);
    }
};
