//给你两个单词?word1 和?word2，请你计算出将?word1?转换成?word2 所使用的最少操作数?。

//你可以对一个单词进行如下三种操作：

//插入一个字符
//删除一个字符
//替换一个字符
//?

//示例?1：

//输入：word1 = "horse", word2 = "ros"
//输出：3
//解释：
//horse -> rorse (将 'h' 替换为 'r')
//rorse -> rose (删除 'r')
//rose -> ros (删除 'e')
//示例?2：

//输入：word1 = "intention", word2 = "execution"
//输出：5
//解释：
//intention -> inention (删除 't')
//inention -> enention (将 'i' 替换为 'e')
//enention -> exention (将 'n' 替换为 'x')
//exention -> exection (将 'n' 替换为 'c')
//exection -> execution (插入 'u')



class Solution {
public:
    int minDistance(string word1, string word2) {
        int len1 = word1.length();
        int len2 = word2.length();
        vector<vector<int>> dp(len1+1, vector<int>(len2+1));

        //初始化第一行，需要转换的字串位置
        for(int i = 0; i <= len2; i++)
            dp[0][i] = i;
        //初始化第一列，被转换的子串中字符位置
        for(int i = 0; i <= len1; i++)
            dp[i][0] = i;

        for(int i = 1; i <= len1; i++)
            for(int j = 1; j <= len2; j++)
            {
                //如果出现字符匹配的情况，赋值为0
                if(word1[i-1] == word2[j-1])
                    dp[i][j] = dp[i-1][j-1];
                else//字符不配，找增删改中最小的操作
                    dp[i][j] = min(dp[i-1][j-1],min(dp[i-1][j],dp[i][j-1])) + 1;
                //dp[i-1][j-1] -- 修改操作
                //dp[i-1][j]  -- 删除操作
                //dp[i][j-1]  -- 插入操作
            }
        
        return dp[len1][len2];
    }
};
