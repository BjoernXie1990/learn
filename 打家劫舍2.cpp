//你是一个专业的小偷，计划偷窃沿街的房屋，每间房内都藏有一定的现金。这个地方所有的房屋都围成一圈，这意味着第一个房屋和最后一个房屋是紧挨着的。同时，相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。

//给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下，能够偷窃到的最高金额。

//示例?1:

//输入: [2,3,2]
//输出: 3
//解释: 你不能先偷窃 1 号房屋（金额 = 2），然后偷窃 3 号房屋（金额 = 2）, 因为他们是相邻的。
//示例 2:

//输入: [1,2,3,1]
//输出: 4
//解释: 你可以先偷窃 1 号房屋（金额 = 1），然后偷窃 3 号房屋（金额 = 3）。
//?    偷窃到的最高金额 = 1 + 3 = 4 。


class Solution {
public:
    int rob(vector<int>& nums) {
        int len = nums.size();
        if(len == 0) return 0;
        if(len == 1) return nums[0];

        int ret = max(slove(nums,0,len-2),
                        slove(nums,1,len-1));
        return ret;
    }

    int slove(vector<int>& nums,int l,int r)
    {
        if(l == r) return nums[l];

        int dp_1 = nums[l];
        int dp_2 = 0;
        for(int i = l+1; i <= r; i++)
        {
            int tmp = dp_1;
            dp_1 = max(nums[i] + dp_2,dp_1);
            dp_2 = tmp;
        }
        return dp_1;
    }
};
